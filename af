#!/usr/bin/ruby

#load dependency paths (makes this portable and allows the user to symlink to
#the script... this will not work for relative symlinks)
$LOAD_PATH.unshift(File.dirname(File.symlink?(__FILE__) ? File.readlink(__FILE__) : __FILE__))

#TODO:
#Finish inline pretty print option
#Preserve issue relationships for pretty print
#Create/Delete/Tag/Change Status for Issues
#Retrieve info for root node/s in the tree
#Implement scrapers for CL/file info

require 'acuforce'
require 'yaml'
require 'open3'

require 'rubygems'
require 'mechanize'
require 'optparse'

DEBUG = false

options = {}
optparse = OptionParser.new do |opts|
  opts.banner = "Usage: af [options]"

  opts.on("-U", "--username [username]", "Acunote username") { |opt| options[:username] = opt }
  opts.on("-P", "--password [password]", "Acunote password") { |opt| options[:password] = opt }  
  opts.on("-p", "--project p1,p2,p3", Array, "Project number/s") { |opt| options[:project] = opt }
  opts.on("-s", "--sprint s1,s2,s3", Array, "Sprint number/s") { |opt| options[:sprint] = opt }
  opts.on("-i", "--issue i1,i2,i3",  Array, "Issue number/s") { |opt| options[:issue] = opt }
  opts.on("-c", "--cl c1,c2,c3", Array, "CL number/s") { |opt| options[:change_list] = opt }
  opts.on("-l", "--link", "Link Issues and CLs") { |opt| options[:link] = true }
  opts.on("-e", "--edit [ops]", Array, "Edit Operations") { |opt| options[:edit] = opt }
  opts.on("-r", "--recurse [depth]", Integer, "Recursion depth") { |opt| options[:recurse] = opt }
  opts.on("-f", "--filter f1,f2,f3", Array, "Search string") { |opt| options[:filter] = opt }
  opts.on("-v", "--verbose", "Verbose output") { |opt| options[:verbose] = true }
  opts.on("-u", "--unique", "Unique output") { |opt| options[:unique] = true }
  opts.on("-d", "--dump [filename]", "Dump output to yaml") { |opt| options[:dump] = opt }
  opts.on("-h", "--help", "Show this message") { 
    puts opts 
    exit
  }
end

begin
  optparse.parse!(ARGV)                                                                                                                                                                                                 

  #find the param which sits lowest in the traversal order
  #this is the level at which the scrape will start
  main_arg = AcuForce::TRAVERSAL_ORDER.reverse.find do |param| options[param] end

  unless main_arg
    puts optparse
    exit
  end

  pp options if DEBUG
  mandatory_params = !File.exists?(AcuForce::SESSION_FILE) ? [:username, :password] : []

  missing = mandatory_params.select {|param| options[param].nil?}
  unless missing.empty?                                                                                                                                                                                         
    puts "Missing options: #{missing.join(', ')}\n\n"                                                                                                                                                               
    missing.each do |param|
      printf "#{param}: "
      if param.to_s =~ /password/
        `stty -echo`; options[param] = gets.strip;`stty echo`;puts
      else
        options[param] = gets.strip
      end
    end
  end            

  #check for dangerous activity
  if options[:recurse] && options[:edit]
    begin
      STDERR.printf "Attn: You are about to perform a recursive edit, are you sure you know what you're doing? [Yes/No] "
      response = gets
    end until ["Yes","No"].include? response.strip!
    exit if response == "No"
  end
rescue OptionParser::ParseError => e
  puts e
end


unless options[:link]
#check perforce availability
Open3.popen3("p4 login -s") do |stdin, stdout, stderr|
  if stderr.gets =~ /command not found/
    STDERR.puts "Attn: could not find p4 binary, log into perforce server for better performance and extended features"
  elsif !(stdout.gets =~ /ticket expires/)
    STDERR.puts "Attn: not logged into perforce, log in for better performance and extended features"
  else
    options[:p4] = true
  end
end
end

AcuForce.new(options).process(main_arg)
